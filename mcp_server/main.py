# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:01:16+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity, HTTPBearer
from fastapi import Query

from models import (
    Activity,
    ActivityAndIdentity,
    ActivityType1,
    ActivityType5,
    Affiliation,
    CustomOrPostActivity,
    Direction,
    Identity,
    Identity1,
    Items,
    Member,
    MemberAndIdentity,
    Note,
    Organization,
    Sort,
    Sort2,
    Sort4,
    Sort6,
    Sort8,
    WebhookSubscription,
)

app = MCPProxy(
    description='Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).',
    title='Orbit API',
    version='v1',
    servers=[{'url': 'https://app.orbit.love/api/v1'}],
)


@app.get(
    '/user',
    tags=['user_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_user():
    """
    Get info about the current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workspaces',
    tags=['user_management', 'workspace_activity_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_workspaces():
    """
    Get all workspaces for the current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workspaces/{workspace_slug}',
    tags=[
        'workspace_organization_management',
        'workspace_activity_management',
        'workspace_reporting',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_workspaces__workspace_slug(
    workspace_slug: str, include_orbit_level_counts: Optional[bool] = None
):
    """
    Get a workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/activities',
    tags=['workspace_activity_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_activities(
    workspace_slug: str,
    affiliation: Optional[Affiliation] = None,
    member_tags: Optional[str] = None,
    orbit: Optional[str] = None,
    activity_type: Optional[ActivityType1] = None,
    identity: Optional[Identity1] = None,
    company__: Optional[str] = Query(None, alias='company[]'),
    title__: Optional[str] = Query(None, alias='title[]'),
    regions__: Optional[str] = Query(None, alias='regions[]'),
    countries__: Optional[str] = Query(None, alias='countries[]'),
    cities__: Optional[str] = Query(None, alias='cities[]'),
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    relative: Optional[str] = None,
    page: Optional[str] = None,
    direction: Optional[Direction] = None,
    items: Optional[Items] = None,
    sort: Optional[Sort] = None,
    type: Optional[str] = None,
):
    """
    List activities for a workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{workspace_slug}/activities',
    description=""" Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity. """,
    tags=['workspace_activity_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post__workspace_slug_activities(
    workspace_slug: str, body: ActivityAndIdentity = None
):
    """
    Create a Custom or a Content activity for a new or existing member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/activities/{id}',
    tags=['workspace_activity_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_activities__id(workspace_slug: str, id: str = ...):
    """
    Get an activity in the workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/activity_types',
    tags=['workspace_activity_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_activity_types(workspace_slug: str):
    """
    List all activity types for a workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/members',
    tags=['workspace_member_management', 'user_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_members(
    workspace_slug: str,
    affiliation: Optional[Affiliation] = None,
    member_tags: Optional[str] = None,
    orbit: Optional[str] = None,
    activity_type: Optional[ActivityType1] = None,
    identity: Optional[Identity1] = None,
    company__: Optional[str] = Query(None, alias='company[]'),
    title__: Optional[str] = Query(None, alias='title[]'),
    regions__: Optional[str] = Query(None, alias='regions[]'),
    countries__: Optional[str] = Query(None, alias='countries[]'),
    cities__: Optional[str] = Query(None, alias='cities[]'),
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    relative: Optional[str] = None,
    query: Optional[str] = None,
    page: Optional[str] = None,
    direction: Optional[Direction] = None,
    items: Optional[Items] = None,
    activities_count_min: Optional[str] = None,
    activities_count_max: Optional[str] = None,
    sort: Optional[Sort2] = None,
    type: Optional[str] = None,
):
    """
    List members in a workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{workspace_slug}/members',
    description=""" This method is useful when you know a member's identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities. """,
    tags=['workspace_member_management', 'user_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post__workspace_slug_members(workspace_slug: str, body: MemberAndIdentity = None):
    """
    Create or update a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/members/find',
    description=""" Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email. """,
    tags=['user_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_members_find(
    workspace_slug: str,
    source: Optional[str] = None,
    source_host: Optional[str] = None,
    uid: Optional[str] = None,
    username: Optional[str] = None,
    email: Optional[str] = None,
    github: Optional[str] = None,
):
    """
    Find a member by an identity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{workspace_slug}/members/{member_slug}',
    tags=['workspace_member_management', 'user_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete__workspace_slug_members__member_slug(
    workspace_slug: str, member_slug: str = ...
):
    """
    Delete a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/members/{member_slug}',
    tags=['user_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_members__member_slug(
    workspace_slug: str, member_slug: str = ...
):
    """
    Get a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{workspace_slug}/members/{member_slug}',
    tags=['workspace_member_management', 'user_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put__workspace_slug_members__member_slug(
    workspace_slug: str, member_slug: str = ..., body: Member = None
):
    """
    Update a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/members/{member_slug}/activities',
    tags=['workspace_activity_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_members__member_slug_activities(
    workspace_slug: str,
    member_slug: str = ...,
    page: Optional[str] = None,
    direction: Optional[Direction] = None,
    items: Optional[Items] = None,
    sort: Optional[Sort4] = None,
    activity_type: Optional[str] = None,
    type: Optional[str] = None,
):
    """
    List activities for a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{workspace_slug}/members/{member_slug}/activities',
    tags=['workspace_activity_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post__workspace_slug_members__member_slug_activities(
    workspace_slug: str, member_slug: str = ..., body: CustomOrPostActivity = None
):
    """
    Create a Custom or a Content activity for a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{workspace_slug}/members/{member_slug}/activities/{id}',
    tags=['workspace_activity_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete__workspace_slug_members__member_slug_activities__id(
    workspace_slug: str, member_slug: str = ..., id: str = ...
):
    """
    Delete a post activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{workspace_slug}/members/{member_slug}/activities/{id}',
    tags=['workspace_activity_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put__workspace_slug_members__member_slug_activities__id(
    workspace_slug: str, member_slug: str = ..., id: str = ..., body: Activity = None
):
    """
    Update a custom activity for a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{workspace_slug}/members/{member_slug}/identities',
    tags=['user_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete__workspace_slug_members__member_slug_identities(
    workspace_slug: str, member_slug: str = ..., body: Identity = None
):
    """
    Remove identity from a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{workspace_slug}/members/{member_slug}/identities',
    tags=['user_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post__workspace_slug_members__member_slug_identities(
    workspace_slug: str, member_slug: str = ..., body: Identity = None
):
    """
    Add identity to a member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/members/{member_slug}/notes',
    tags=['workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_members__member_slug_notes(
    workspace_slug: str, member_slug: str = ..., page: Optional[str] = None
):
    """
    Get the member's notes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{workspace_slug}/members/{member_slug}/notes',
    tags=['workspace_activity_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post__workspace_slug_members__member_slug_notes(
    workspace_slug: str, member_slug: str = ..., body: Note = None
):
    """
    Create a note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{workspace_slug}/members/{member_slug}/notes/{id}',
    tags=['workspace_activity_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put__workspace_slug_members__member_slug_notes__id(
    workspace_slug: str, member_slug: str = ..., id: str = ..., body: Note = None
):
    """
    Update a note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/organizations',
    tags=['workspace_organization_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_organizations(
    workspace_slug: str,
    query: Optional[str] = None,
    page: Optional[str] = None,
    direction: Optional[Direction] = None,
    items: Optional[Items] = None,
    sort: Optional[Sort6] = None,
):
    """
    List organizations in a workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/organizations/{organization_id}',
    tags=['workspace_organization_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_organizations__organization_id(
    workspace_slug: str, organization_id: str = ...
):
    """
    Get an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{workspace_slug}/organizations/{organization_id}',
    tags=['workspace_organization_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put__workspace_slug_organizations__organization_id(
    workspace_slug: str, organization_id: str = ..., body: Organization = None
):
    """
    Update an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/organizations/{organization_id}/activities',
    tags=['workspace_activity_management', 'workspace_member_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_organizations__organization_id_activities(
    workspace_slug: str,
    organization_id: str = ...,
    page: Optional[str] = None,
    direction: Optional[Direction] = None,
    items: Optional[Items] = None,
    sort: Optional[Sort8] = None,
    activity_type: Optional[ActivityType5] = None,
):
    """
    List member activities in an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/organizations/{organization_id}/members',
    tags=['workspace_member_management', 'workspace_organization_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_organizations__organization_id_members(
    workspace_slug: str,
    organization_id: str = ...,
    page: Optional[str] = None,
    items: Optional[Items] = None,
):
    """
    List members in an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/reports',
    tags=['workspace_reporting', 'workspace_activity_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_reports(
    workspace_slug: str,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    relative: Optional[str] = None,
    properties: Optional[str] = None,
    activity_type: Optional[str] = None,
    type: Optional[str] = None,
):
    """
    Get a workspace stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/webhooks',
    tags=['workspace_webhook_management', 'general_webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_webhooks(workspace_slug: str):
    """
    List webhooks in a workspace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{workspace_slug}/webhooks',
    tags=['workspace_webhook_management', 'general_webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def post__workspace_slug_webhooks(
    workspace_slug: str, body: WebhookSubscription = None
):
    """
    Create a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{workspace_slug}/webhooks/{id}',
    tags=['workspace_webhook_management', 'general_webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete__workspace_slug_webhooks__id(workspace_slug: str, id: str = ...):
    """
    Delete a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{workspace_slug}/webhooks/{id}',
    tags=['workspace_webhook_management', 'general_webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get__workspace_slug_webhooks__id(workspace_slug: str, id: str = ...):
    """
    Get a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{workspace_slug}/webhooks/{id}',
    tags=['workspace_webhook_management', 'general_webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def put__workspace_slug_webhooks__id(
    workspace_slug: str, id: str = ..., body: WebhookSubscription = None
):
    """
    Update a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
