# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:01:16+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class Activity(BaseModel):
    activity_type: Optional[str] = Field(
        None,
        description='The type of activity - what action was done by the member. This is a legacy field, use activity_type_key instead.',
    )
    activity_type_key: Optional[str] = Field(
        None,
        description='The key for a custom activity type for the workspace. Will create a new activity type if it does not exist.',
    )
    description: Optional[str] = Field(
        None, description='A description of the activity; displayed in the timeline'
    )
    key: Optional[str] = Field(
        None,
        description='Supply a key that must be unique or leave blank to have one generated.',
    )
    link: Optional[str] = Field(
        None, description='A URL for the activity; displayed in the timeline'
    )
    link_text: Optional[str] = Field(None, description='The text for the timeline link')
    occurred_at: Optional[str] = Field(
        None, description='The date and time the activity occurred; defaults to now'
    )
    properties: Optional[Dict[str, Any]] = Field(
        None,
        description='Key-value pairs to provide contextual metadata about an activity.',
    )
    title: str = Field(
        ..., description='A title for the activity; displayed in the timeline'
    )
    weight: Optional[str] = Field(
        None,
        description='A custom weight to be used in filters and reports; defaults to 1.',
    )


class Alert(BaseModel):
    activity_types: Optional[List[str]] = None
    event_type: Optional[str] = None
    member_tags: Optional[List[str]] = None
    name: str


class Destination(BaseModel):
    alerts: Optional[List[Alert]] = None
    name: str
    url: str


class Identity(BaseModel):
    email: Optional[str] = Field(
        None, description='The email of the person in the source system'
    )
    name: Optional[str] = Field(
        None, description='The name of the person in the source system'
    )
    source: str = Field(
        ...,
        description='The type of source: known values include github, twitter, discourse, email, linkedin, devto. Custom values can also be used',
    )
    source_host: Optional[str] = Field(
        None,
        description='Specifies the location of the source, such as the host of a Discourse instance',
    )
    uid: Optional[str] = Field(
        None, description='The uid of the person in the source system'
    )
    url: Optional[str] = Field(
        None,
        description='For custom identities, an optional link to the profile on the source system',
    )
    username: Optional[str] = Field(
        None, description='The username of the person in the source system'
    )


class Member(BaseModel):
    bio: Optional[str] = None
    birthday: Optional[str] = None
    company: Optional[str] = None
    devto: Optional[str] = Field(None, description="The member's DEV username")
    email: Optional[str] = Field(None, description="The member's email")
    github: Optional[str] = Field(None, description="The member's GitHub username")
    linkedin: Optional[str] = Field(
        None, description="The member's LinkedIn username, without the in/ or pub/"
    )
    location: Optional[str] = None
    name: Optional[str] = None
    pronouns: Optional[str] = None
    shipping_address: Optional[str] = None
    slug: Optional[str] = None
    tag_list: Optional[str] = Field(
        None, description='Deprecated: Please use the tags attribute instead'
    )
    tags: Optional[str] = Field(
        None,
        description='Replaces all tags for the member; comma-separated string or array',
    )
    tags_to_add: Optional[str] = Field(
        None, description='Adds tags to member; comma-separated string or array'
    )
    teammate: Optional[bool] = None
    title: Optional[str] = None
    tshirt: Optional[str] = None
    twitter: Optional[str] = Field(None, description="The member's Twitter username")
    url: Optional[str] = None


class MemberAndIdentity(BaseModel):
    identity: Optional[Identity] = None
    member: Optional[Member] = None


class Note(BaseModel):
    body: str


class Organization(BaseModel):
    crm_uid: Optional[str] = Field(
        None, description='The unique identifier of the organization in your CRM.'
    )
    crm_url: str = Field(
        ..., description='A link to the organization profile in your CRM.'
    )
    deal_closed_date: Optional[str] = Field(
        None, description='The date the organization became a customer.'
    )
    lifecycle_stage: str = Field(
        ...,
        description='The current stage of the organization in the marketing or sales process.',
    )
    owner_email: Optional[str] = Field(
        None,
        description='The email of the team member who is in charge of the organization.',
    )
    owner_name: Optional[str] = Field(
        None,
        description='The name of the team member who is in charge of the organization.',
    )
    price_plan: Optional[str] = Field(
        None, description='The pricing plan the organization is on.'
    )
    source: str = Field(
        ..., description='The name of the CRM you use for tracking the organization.'
    )


class ActivityType(Enum):
    content = 'content'


class PostActivity(BaseModel):
    activity_type: ActivityType
    occurred_at: Optional[str] = Field(
        None,
        description='The date and time at which the content was published; defaults to now',
    )
    url: str = Field(..., description='The url representing the post')


class PostActivityWithMember(PostActivity):
    member: Optional[Member] = None


class WebhookSubscription(BaseModel):
    activity_tags: Optional[List[str]] = None
    activity_types: Optional[List[str]] = None
    event_type: str
    member_tags: Optional[List[str]] = None
    name: str
    secret: Optional[str] = None
    url: str


class Affiliation(Enum):
    member = 'member'
    teammate = 'teammate'


class ActivityType1(Enum):
    discourse_topic_created = 'discourse:topic:created'
    discourse_post_liked = 'discourse:post:liked'
    discourse_user_created = 'discourse:user:created'
    discourse_post_created = 'discourse:post:created'
    slack_message_sent = 'slack:message:sent'
    slack_thread_replied = 'slack:thread:replied'
    slack_channel_joined = 'slack:channel:joined'
    note_created = 'note:created'
    post_created = 'post:created'
    issues_opened = 'issues:opened'
    discord_message_sent = 'discord:message:sent'
    issue_comment_created = 'issue_comment:created'
    discord_thread_replied = 'discord:thread:replied'
    custom_happened = 'custom:happened'
    dev_comment = 'dev:comment'
    discord_message_replied = 'discord:message:replied'
    discord_server_joined = 'discord:server:joined'
    insided_conversation_started = 'insided:conversation:started'
    fork_created = 'fork:created'
    insided_idea_replied = 'insided:idea:replied'
    insided_article_created = 'insided:article:created'
    discussions_discussion_created = 'discussions:discussion_created'
    insided_question_replied = 'insided:question:replied'
    discussions_comment = 'discussions:comment'
    discussions_reply = 'discussions:reply'
    insided_article_replied = 'insided:article:replied'
    insided_question_asked = 'insided:question:asked'
    insided_conversation_replied = 'insided:conversation:replied'
    insided_idea_submitted = 'insided:idea:submitted'
    reddit_comment = 'reddit:comment'
    reddit_post = 'reddit:post'
    stackoverflow_answer = 'stackoverflow:answer'
    linkedin_comment = 'linkedin:comment'
    pull_requests_opened = 'pull_requests:opened'
    pull_requests_merged = 'pull_requests:merged'
    star_created = 'star:created'
    stackoverflow_question = 'stackoverflow:question'
    tweet_sent = 'tweet:sent'
    twitter_followed = 'twitter:followed'
    youtube_comment = 'youtube:comment'


class Identity1(Enum):
    github = 'github'
    twitter = 'twitter'
    email = 'email'
    discourse = 'discourse'
    linkedin = 'linkedin'
    devto = 'devto'
    slack = 'slack'
    discord = 'discord'


class Direction(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class Items(Enum):
    field_10 = '10'
    field_50 = '50'
    field_100 = '100'


class Sort(Enum):
    occurred_at = 'occurred_at'
    member = 'member'


class Sort2(Enum):
    activities_count = 'activities_count'
    company = 'company'
    created_at = 'created_at'
    first_activity = 'first_activity'
    github_followers = 'github_followers'
    id = 'id'
    last_activity = 'last_activity'
    location = 'location'
    love = 'love'
    name = 'name'
    orbit = 'orbit'
    reach = 'reach'
    title = 'title'
    twitter_followers = 'twitter_followers'
    updated_at = 'updated_at'


class Sort4(Enum):
    occurred_at = 'occurred_at'
    member = 'member'


class Sort6(Enum):
    name = 'name'
    website = 'website'
    members_count = 'members_count'
    employees_count = 'employees_count'


class Sort8(Enum):
    occurred_at = 'occurred_at'
    member = 'member'


class ActivityType5(Enum):
    content = 'content'
    custom = 'custom'
    discord = 'discord'
    discourse = 'discourse'
    github = 'github'
    slack = 'slack'
    twitter = 'twitter'


class ActivityWithMember(Activity):
    member: Optional[Member] = None


class CustomOrPostActivity(RootModel[Union[Activity, PostActivity]]):
    root: Union[Activity, PostActivity]


class ActivityAndIdentity(BaseModel):
    activity: Optional[Union[ActivityWithMember, PostActivityWithMember]] = None
    identity: Optional[Identity] = None
